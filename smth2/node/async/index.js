// Асинхронность 1
// Promise

/*
    Promise - это объект, представляющий результат успешного или 
    неудочного завершения асинхронной операции. 
    
    Асинхронная операция - это некоторое действие, которое выполняется
    независимо от окружающего её кода, в котором она вызывается, не 
    блокирует выполнение вызываемого кода.

    промис может находится в 1 из следующих состояний:
    - pending (состояние ожидания) - начальное состояние, промис создан,
    но выполнение ещё не завершено;

    - fulfilled (успешно завершено) - действие, которое представляет промис,
    успешно завершено

    - rejected (завершено с ошибкой) - при выполнении действия, которое
    представляет промис, произошла ошибка    


    Для создания промиса применятся конструктор типа Promise:
        new Promise(executor)

    в качестве параметра конструктор принимает функцию, которая выполняется
    при создании промиса. Обычно эта функция представляет асинхронные операции,
    которые занимают продолжительное время. 
 */

// простейший промис
const myPromise = new Promise(function(){
    console.log("...async 1");
});

// при создании промиса, когда его функция ещё не начала выполняться, промис
// переходит в состояние pending, то есть ожидает выполнения.

// как правило, функция которая передаётся в конструктор Promise, принимает
// 2 параметра - resolve, reject
const myPromise2 = new Promise(function(resolve, reject){
    console.log("...async 2");
});

/*
    оба параметра - resolve и reject - функции, каждая из этих функций
    принимает параметр любого типа.

    Первый параметр - функция resolve вызывается в случае успешного выполнения,
    в неё мы можем передать значение, которое мы можем получить в результате
    успешного выполнения.

    Второй параметр - функция reject вызывается, если выполнение операции 
    завершилось с ошибкой. Мы можем в неё передать значение, которое 
    представит некоторую информацию об ошибке.
*/

// Успешное выполнение промиса:
// через resolve
const myPromise3 = new Promise( function(resolve) {
    console.log("...async 3");

    resolve("3 executed!");
});
// при выполнении функции resolve промис переходит в состояние fulfilled
// (успешно выполнено). 
// Оформлять return в промисе можно, но бессмыслено, результат нужно класть
// в resolve

// Передача информации об ошибке
const myPromise4 = new Promise(function (resolve, reject) {
    console.log("...async 4");
    
    reject("4 failed!");
});
// при вызове функции reject() промис переходит в состояние rejected
// (завершилось с ошибкой)

const x = 4;
const y = 0;

const myPromise5 = new Promise(function(resolve,reject){
    if (y === 0) {
        reject("переданы некорректные данные");
    }
    else {
        const z = x / y;
        resolve(z);
    }
});
// в данном случае, если значение константы y равно 0, то сообщаем об
// ошибке, вызывая функцию reject(). Если не равно 0, то выполняем операцию
// деления и передаём результат в функцию resolve().



